















#include "alif.h"
//#include "alifCore_call.h"
//#include "alifCore_ceval.h"
//#include "alifCore_dict.h"
//#include "alifCore_frame.h"
#include "alifCore_initConfig.h"
//#include "alifCore_long.h"
//#include "alifCore_modSupport.h"
//#include "alifCore_namespace.h"
//#include "alifCore_object.h"
//#include "alifCore_pathConfig.h"
//#include "alifCore_alifErrors.h"
#include "alifCore_alifLifeCycle.h"
//#include "alifCore_alifMath.h"
#include "alifCore_alifMem.h"
#include "alifCore_alifState.h"
//#include "alifCore_structSeq.h"
//#include "alifCore_tuple.h"

//#include "frameObject.h"
//#include "alifDTrace.h"
#include "osDefs.h"
//#include "stdlibModuleNames.h"
#include <locale.h>

#ifdef MS_WINDOWS
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif /* MS_WINDOWS */

#ifdef MS_COREDLL
extern void* AlifWinDLLhModule;

extern const char* alifWinDLLVersionString;
#endif

#ifdef __EMSCRIPTEN__
#include <emscripten.h>
#endif

#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif


//#include "clinic/sysModule.c.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class PreInitEntry {
public:
	wchar_t* value;
	PreInitEntry* next;
};
typedef class PreInitEntry* AlifPreInitEntry;

static AlifPreInitEntry preInitWarnOptions = nullptr;
static AlifPreInitEntry preInitXOptions = nullptr;
















































static void clear_preInitEntries(AlifPreInitEntry* _optionList)
{
	AlifPreInitEntry current = *_optionList;
	*_optionList = nullptr;
	AlifMemAllocatorEx oldAlloc;
	alifMem_setDefaultAllocator(AlifMem_Domain_Raw, &oldAlloc);
	while (current != nullptr) {
		AlifPreInitEntry next = current->next;
		alifMem_rawFree(current->value);
		alifMem_rawFree(current);
		current = next;
	}
	alifMem_setAllocator(AlifMem_Domain_Raw, &oldAlloc);
}




AlifStatus alifSys_readPreInitWarnOptions(AlifWideStringList* _options)
{
	AlifStatus status{};
	AlifPreInitEntry entry{};

	for (entry = preInitWarnOptions; entry != nullptr; entry = entry->next) {
		status = alifWideStringList_append(_options, entry->value);
		if (ALIFSTATUS_EXCEPTION(status)) {
			return status;
		}
	}

	clear_preInitEntries(&preInitWarnOptions);
	return ALIFSTATUS_OK();
}



AlifStatus alifSys_readPreInitXOptions(AlifConfig* _config)
{
	AlifStatus status{};
	AlifPreInitEntry entry{};

	for (entry = preInitXOptions; entry != nullptr; entry = entry->next) {
		status = alifWideStringList_append(&_config->xOptions, entry->value);
		if (ALIFSTATUS_EXCEPTION(status)) {
			return status;
		}
	}

	clear_preInitEntries(&preInitXOptions);
	return ALIFSTATUS_OK();
}
