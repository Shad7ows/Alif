








































#include "alif.h"
//#include "alifCore_abstract.h"
//#include "alifCore_atomicFuncs.h"
//#include "alifCore_bytesMethods.h"
//#include "alifCore_bytesObject.h"
//#include "alifCore_codecs.h"
//#include "alifCore_format.h"
#include "alifCore_initConfig.h"
#include "alifCore_interp.h"
//#include "alifCore_long.h"
//#include "alifCore_object.h"
//#include "alifCore_pathConfig.h"
//#include "alifCore_alifErrors.h"
#include "alifCore_alifLifeCycle.h"
#include "alifCore_alifState.h"
//#include "alifCore_ucnHash.h"
//#include "alifCore_unicodeObject.h"
//#include "alifCore_unicodeObjectGenerated.h"
//#include "stringlib/eq.h"
//#include <stddef.h> 

#ifdef MS_WINDOWS
#include <windows.h>
#endif

//#ifdef HAVE_NON_UNICODE_WCHAR_T_REPRESENTATION // تم تعليقها مؤقتا ليعمل البرنامج
#  include "alifCore_fileUtils.h"
//#endif
































typedef uint32_t AlifUCS4;























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* ----- UTF-8 Codec ------------------------------------------------------ */





































































































































































































































































int alif_decodeUTF8Ex(const char* _s, AlifSizeT _size, wchar_t** _wstr, size_t* _wLen, const char** _reason, AlifErrorHandler _errors)
{
	const char* orig_s = _s;
	const char* e{};
	wchar_t* unicode{};
	AlifSizeT outpos{};

	int surrogateescape = 0;
	int surrogatepass = 0;
	switch (_errors)
	{
	case Alif_Error_Strict:
		break;
	case Alif_Error_SurroGateEscape:
		surrogateescape = 1;
		break;
	case Alif_Error_SurroGatePass:
		surrogatepass = 1;
		break;
	default:
		return -3;
	}

	if (ALIFSIZE_T_MAX / (AlifSizeT)sizeof(wchar_t) - 1 < _size) {
		return -1;
	}

	unicode = (wchar_t*)alifMem_rawMalloc((_size + 1) * sizeof(wchar_t)); // تم تغيير النوع بسبب ظهور خطأ
	if (!unicode) {
		return -1;
	}

	e = _s + _size;
	outpos = 0;
	while (_s < e) {
		AlifUCS4 ch{};
#if SIZEOF_WCHAR_T == 4
		ch = ucs4Lib_utf8Decode(&s, e, (AlifUCS4*)unicode, &outpos);
#else
		//ch = ucs2Lib_utf8Decode(&_s, e, (AlifUCS2*)unicode, &outpos);
#endif
		if (ch > 0xFF) {
#if SIZEOF_WCHAR_T == 4
			Py_UNREACHABLE();
#else
			//assert(ch > 0xFFFF && ch <= MAX_UNICODE);
			/* write a surrogate pair */
			//unicode[outpos++] = (wchar_t)alifUnicode_highSurroGate(ch);
			//unicode[outpos++] = (wchar_t)alifUnicode_lowSurroGate(ch);
#endif
		}
		else {
			if (!ch && _s == e) {
				break;
			}

			if (surrogateescape) {
				unicode[outpos++] = 0xDC00 + (unsigned char)*_s++;
			}
			else {
				/* Is it a valid three-byte code? */
				if (surrogatepass
					&& (e - _s) >= 3
					&& (_s[0] & 0xf0) == 0xe0
					&& (_s[1] & 0xc0) == 0x80
					&& (_s[2] & 0xc0) == 0x80)
				{
					ch = ((_s[0] & 0x0f) << 12) + ((_s[1] & 0x3f) << 6) + (_s[2] & 0x3f);
					_s += 3;
					unicode[outpos++] = ch;
				}
				else {
					alifMem_rawFree(unicode);
					if (_reason != NULL) {
						switch (ch) {
						case 0:
							*_reason = "unexpected end of data";
							break;
						case 1:
							*_reason = "invalid start byte";
							break;
							/* 2, 3, 4 */
						default:
							*_reason = "invalid continuation byte";
							break;
						}
					}
					if (_wLen != NULL) {
						*_wLen = _s - orig_s;
					}
					return -2;
				}
			}
		}
	}
	unicode[outpos] = L'\0';
	if (_wLen) {
		*_wLen = outpos;
	}
	*_wstr = unicode;
	return 0;
}



























































































































































