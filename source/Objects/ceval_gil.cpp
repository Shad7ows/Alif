
#include "alif.h"
#include "alifCore_atomic.h"        
//#include "alifCore_ceval.h"         
//#include "alifCore_initConfig.h"    
//#include "alifCore_interp.h"        
//#include "alifCore_alifErrors.h"      
#include "alifCore_alifLifeCycle.h"   
#include "alifCore_alifMem.h"        
#include "alifCore_alifState.h"       













































































































































































































#define DEFAULT_INTERVAL 5000

static void gil_initialize(class GilRuntimeState* _gil)
{
	AlifAtomicInt uninitialized = { -1 };
	_gil->locked = uninitialized;
	_gil->interval = DEFAULT_INTERVAL;
}












































































































































































































































































































































































































































































































































































































































































































































































































void alifEval_initState(AlifInterpreterState* _interp, AlifThreadTypeLock _pendingLock)
{
	gil_initialize(&_interp->gil);

	class PendingCalls* pending = &_interp->cEval.pending;
	//assert(pending->lock == nullptr);
	pending->lock = _pendingLock;
}
