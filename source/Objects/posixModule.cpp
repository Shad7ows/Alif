








#include "alif.h"

#ifdef __VXWORKS__
//#  include "alifCore_bitUtils.h"
#endif
//#include "alifCore_call.h"
//#include "alifCore_cEval.h"
#include "alifCore_fileUtils.h"
#include "alifCore_import.h"
#include "alifCore_initConfig.h"
//#include "alifCore_moduleObject.h"
//#include "alifCore_object.h"
#include "alifCore_alifLifeCycle.h"
#include "alifCore_alifState.h"
//#include "alifCore_signal.h"

#ifdef MS_WINDOWS
#  include <windows.h>
#  if !defined(MS_WINDOWS_GAMES) || defined(MS_WINDOWS_DESKTOP)
#    include <pathcch.h>
#  endif
#  include <winioctl.h>
#  include <lmcons.h>
#  include "osDefs.h"
#  if defined(MS_WINDOWS_DESKTOP) || defined(MS_WINDOWS_SYSTEM)
#    define HAVE_SYMLINK
#  endif /* MS_WINDOWS_DESKTOP | MS_WINDOWS_SYSTEM */
#endif










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































int alifOS_getFullPathName(const wchar_t* _path, wchar_t** _absPathP)
{
	wchar_t woutbuf[MAX_PATH], * woutbufp = woutbuf;
	DWORD result;

	result = GetFullPathNameW(_path, ALIF_ARRAY_LENGTH(woutbuf), woutbuf, nullptr);
	if (!result) {
		return -1;
	}

	if (result >= ALIF_ARRAY_LENGTH(woutbuf)) {
		if ((size_t)result <= (size_t)ALIFSIZE_T_MAX / sizeof(wchar_t)) {
			woutbufp = (wchar_t*)alifMem_rawMalloc((size_t)result * sizeof(wchar_t)); // تم تغيير النوع بسبب ظهور خطأ
		}
		else {
			woutbufp = nullptr;
		}
		if (!woutbufp) {
			*_absPathP = nullptr;
			return 0;
		}

		result = GetFullPathNameW(_path, result, woutbufp, NULL);
		if (!result) {
			alifMem_rawFree(woutbufp);
			return -1;
		}
	}

	if (woutbufp != woutbuf) {
		*_absPathP = woutbufp;
		return 0;
	}

	*_absPathP = alifMem_rawWcsDup(woutbufp);
	return 0;
}












































